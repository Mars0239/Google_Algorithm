"""
20. Valid Parentheses
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']',
determine if the input string is valid.

"())()"
"""
class Solution:
    def isValid(self, s: str) -> bool: 
        stack = []
        matching = {"(": ")", "[": "]", "{": "}"}  # Maps opening to closing brackets

        for char in s:  # Iterate over each character in the string
            if char in matching:  # If it's an opening bracket
                stack.append(char)  # Store it in the stack
            else:
                if not stack: 
                    return False  # If stack is empty but we have a closing bracket, it's invalid
                previous_open = stack.pop()  # Remove the last opening bracket from the stack
                if matching[previous_open] != char:  # Check if it matches the current closing bracket
                    return False  # If not, it's invalid
        return not stack  # If stack is empty, all brackets were matched; otherwise, it's invalid

# Testing:
a = Solution()
s = '()'
print(a.isValid(s))



