"""
91. Decode Ways
A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

The test cases are generated so that the answer fits in a 32-bit integer.


"""
class Solution:
    def numDecodings(self, s: str) -> int:
      
      def f1(s, i, memo):
        if i == len(s):
          return 1 
        if i in memo:
          return memo[i]
            
        ans = 0 
        if s[i] == '0':
          ans = 0
        else:
          ans += f1(s, i + 1, memo)
          if i + 1 < len(s) and int(s[i:i+2]) <= 26:
            ans += f1(s, i + 2, memo)

        memo[i] = ans  # Store the result in memoization table
        return ans
      
      memo = {}  # Memoization table
      return f1(s, 0, memo)  # Call the helper function with i = 0 and memoization table
      
